#!/usr/bin/ruby
# -*- coding: utf-8 -*-

# Many Pathname operations use getwd when they shouldn't, and then throw 
# odd exceptions. Reduce our support burden by showing a user-friendly error.
Dir.getwd rescue abort "The current working directory doesn't exist, cannot proceed."

HOMEBREW_BREW_FILE = ENV['HOMEBREW_BREW_FILE'] = File.expand_path(__FILE__)

require 'pathname'
HOMEBREW_LIBRARY_PATH = (Pathname.new(__FILE__).realpath.dirname.parent+"Library/Homebrew").to_s
$:.unshift(HOMEBREW_LIBRARY_PATH)
require 'global'

case ARGV.first
when '-h', '--help', '--usage', '-?', 'help', nil
  puts ARGV.usage
  exit 0
when '--version'
  puts HOMEBREW_VERSION
  exit 0
when '-v'
  if ARGV.length > 1
    puts "Homebrew #{HOMEBREW_VERSION}"
    # continue in verbose mode
    ARGV << ARGV.shift
  else
    puts HOMEBREW_VERSION
    exit 0
  end
end

case HOMEBREW_PREFIX.to_s when '/', '/usr'
  # it may work, but I only see pain this route and don't want to support it
  abort "Cowardly refusing to continue at this prefix: #{HOMEBREW_PREFIX}"
end
if MACOS_VERSION < 10.5
  abort "Homebrew requires Leopard or higher. For Tiger support, see:\nhttp://github.com/sceaga/homebrew/tree/tiger"
end

begin
  require 'brew.h'

  case arg = ARGV.shift
  when '--cache'
    if ARGV.named.empty?
      puts HOMEBREW_CACHE
    else
      puts ARGV.formulae.collect {|f| f.cached_download}
    end

  when '--prefix'
    if ARGV.named.empty?
      puts HOMEBREW_PREFIX
    else
      puts ARGV.formulae.collect {|f| f.prefix}
    end

  when '--repository'
    puts HOMEBREW_REPOSITORY

  when '--cellar'
    if ARGV.named.empty?
      puts HOMEBREW_CELLAR
    else
      puts ARGV.formulae.collect {|f| HOMEBREW_CELLAR+f.name}
    end

  when '--config'
    dump_config

  when '--env'
    require 'hardware'
    require 'extend/ENV'
    ENV.extend(HomebrewEnvExtension)
    ENV.setup_build_environment
    dump_build_env ENV

  when 'home', 'homepage'
    require 'commands/home'
    brew_home

  when 'ls', 'list'
    require 'commands/list'
    brew_list

  when 'search', '-S'
    require 'commands/search'
    brew_search

  when 'edit'
    require 'commands/edit'
    brew_edit

  when 'up', 'update'
    require 'commands/update'
    brew_update

  when 'ln', 'link'
    require 'commands/link'
    brew_link

  when 'unlink'
    ARGV.kegs.each {|keg| puts "#{keg.unlink} links removed for #{keg}"}

  when 'remove', 'rm', 'uninstall'
    require 'commands/remove'
    brew_remove

  when 'prune'
    require 'commands/prune'
    brew_prune

  when 'create'
    require 'commands/create'
    brew_create

  when 'diy', 'configure'
    require 'commands/diy'
    brew_diy

  when 'info', 'abv'
    require 'commands/info'
    brew_info

  when 'cleanup'
    require 'commands/cleanup'
    brew_cleanup

  when 'install'
    check_for_blacklisted_formula(ARGV.named)
    brew_install

  when 'log'
    require 'commands/log'
    brew_log

  when 'uses'
    require 'commands/uses'
    brew_uses

  when 'deps'
    require 'commands/deps'
    brew_deps

  when 'cat'
    require 'commands/cat'
    brew_cat

  when 'outdated'
    require 'commands/outdated'
    brew_outdated

  when 'fetch'
    require 'commands/fetch'
    brew_fetch

  when 'doctor', 'dr'
    require 'commands/doctor'
    brew_doctor

  when 'audit'
    require 'commands/audit'
    brew_audit

  else
    # Add example external commands to PATH before checking.
    ENV['PATH'] += ":#{HOMEBREW_REPOSITORY}/Library/Contributions/examples"

    # Check for an external shell command
    if system "/usr/bin/which -s brew-#{arg}"
      # Add some Homebrew vars to the ENV
      %w(CACHE CELLAR LIBRARY_PATH PREFIX REPOSITORY).each do |e|
        ENV["HOMEBREW_#{e}"] = eval("HOMEBREW_#{e}")
      end
      exec("brew-#{arg}", *ARGV)
    end

    # Check for an external ruby command
    external_rb = `/usr/bin/which brew-#{arg}.rb`.chomp
    unless external_rb.empty?
      require external_rb
      exit 0
    end

    # Check for git commands
    if %w(branch checkout pull push rebase reset).include? arg
      onoe "Unknown command '#{arg}' (did you mean 'git #{arg}'?)"
    else
      onoe "Unknown command '#{arg}'"
    end
  end

rescue FormulaUnspecifiedError
  abort "This command requires a formula argument"
rescue KegUnspecifiedError
  abort "This command requires a keg argument"
rescue UsageError
  onoe "Invalid usage"
  abort ARGV.usage
rescue SystemExit
  puts "Kernel.exit" if ARGV.verbose?
  raise
rescue Interrupt => e
  puts # seemingly a newline is typical
  exit 130
rescue BuildError => e
  e.backtrace[1] =~ %r{Library/Formula/(.+)\.rb:(\d+)}
  formula_name = $1
  error_line = $2
  puts "Exit status: #{e.exit_status}"
  puts
  puts "http://github.com/mxcl/homebrew/blob/master/Library/Formula/#{formula_name}.rb#L#{error_line}"
  puts
  ohai "Environment"
  dump_config
  puts
  ohai "Build Flags"
  dump_build_env e.env
  onoe e
  puts PLEASE_REPORT_BUG
  # this feature can be slow (depends on network conditions and if github is up)
  # so ideally we'd show feedback, eg. "checking for existing issues..." and
  # then replace that string with the following when the github api returns
  issues = issues_for_formula(formula_name)
  puts "These existing issues may help you:", *issues unless issues.empty?
  if e.was_running_configure?
    puts "It looks like an autotools configure failed."
    puts "Consider re-running the install with '-vd' to keep 'config.log' around:"
    puts "    brew install -vd #{formula_name}"
    puts "Gist 'config.log' and any error output when reporting an issue."
    puts "Remember to include your config information: brew --config"
  end
  puts
  puts "Also try:"
  puts "  `brew doctor` to check your setup for common problems."
  puts "  `brew missing` to check installed packages for missing deps."
  exit 1
rescue RuntimeError, SystemCallError => e
  onoe e
  puts e.backtrace if ARGV.debug?
  exit 1
rescue Exception => e
  onoe e
  puts PLEASE_REPORT_BUG
  puts e.backtrace
  exit 1
end
