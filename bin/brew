#!/usr/bin/ruby
# -*- coding: utf-8 -*-

# Many Pathname operations use getwd when they shouldn't, and then throw 
# odd exceptions. Reduce our support burden by showing a user-friendly error.
Dir.getwd rescue abort "The current working directory doesn't exist, cannot proceed."

HOMEBREW_BREW_FILE = ENV['HOMEBREW_BREW_FILE'] = File.expand_path(__FILE__)

require 'pathname'
HOMEBREW_LIBRARY_PATH = (Pathname.new(__FILE__).realpath.dirname.parent+"Library/Homebrew").to_s
$:.unshift(HOMEBREW_LIBRARY_PATH)
require 'global'

case ARGV.first
when '-h', '--help', '--usage', '-?', 'help', nil
  puts ARGV.usage
  exit 0
when '--version'
  puts HOMEBREW_VERSION
  exit 0
when '-v'
  if ARGV.length > 1
    puts "Homebrew #{HOMEBREW_VERSION}"
    # continue in verbose mode
    ARGV << ARGV.shift
  else
    puts HOMEBREW_VERSION
    exit 0
  end
end

case HOMEBREW_PREFIX.to_s when '/', '/usr'
  # it may work, but I only see pain this route and don't want to support it
  abort "Cowardly refusing to continue at this prefix: #{HOMEBREW_PREFIX}"
end
if MACOS_VERSION < 10.5
  abort "Homebrew requires Leopard or higher. For Tiger support, see:\nhttp://github.com/sceaga/homebrew/tree/tiger"
end

begin
  require 'brew.h'

  case arg = ARGV.shift
  when '--cache'
    if ARGV.named.empty?
      puts HOMEBREW_CACHE
    else
      puts ARGV.formulae.collect {|f| f.cached_download}
    end

  when '--prefix'
    if ARGV.named.empty?
      puts HOMEBREW_PREFIX
    else
      puts ARGV.formulae.collect {|f| f.prefix}
    end

  when '--repository'
    puts HOMEBREW_REPOSITORY

  when '--cellar'
    if ARGV.named.empty?
      puts HOMEBREW_CELLAR
    else
      puts ARGV.formulae.collect {|f| HOMEBREW_CELLAR+f.name}
    end

  when '--config'
    dump_config

  when '--env'
    require 'hardware'
    require 'extend/ENV'
    ENV.extend(HomebrewEnvExtension)
    ENV.setup_build_environment
    dump_build_env ENV

    when 'home', 'homepage'
      if ARGV.named.empty?
        exec "open", HOMEBREW_WWW
      else
        exec "open", *ARGV.formulae.collect {|f| f.homepage}
      end

  when 'ls', 'list'
    require 'commands/list'
    brew_list

  when 'search', '-S'
    require 'commands/search'
    brew_search

  when 'edit'
    require 'commands/edit'
    brew_edit

  when 'up', 'update'
    abort "Please `brew install git' first." unless system "/usr/bin/which -s git"

    require 'update'
    updater = RefreshBrew.new
    unless updater.update_from_masterbrew!
      puts "Already up-to-date."
    else
      updater.report
    end

    when 'ln', 'link'
      ARGV.kegs.each {|keg| puts "#{keg.link} links created for #{keg}"}

    when 'unlink'
      ARGV.kegs.each {|keg| puts "#{keg.unlink} links removed for #{keg}"}

    when 'rm', 'uninstall', 'remove'
      if ARGV.flag? "--force"
        require 'formula'
        ARGV.formulae.each do |f|
          formula_cellar = f.prefix.parent
          next unless File.exist? formula_cellar
          puts "Uninstalling #{f.name}..."
          formula_cellar.children do |k|
            keg = Keg.new(k)
            keg.unlink
          end

          formula_cellar.rmtree
        end
      else
        begin
          ARGV.kegs.each do |keg|
            puts "Uninstalling #{keg}..."
            keg.unlink
            keg.uninstall
          end
        rescue MultipleVersionsInstalledError => e
          onoe e
          puts "Use `brew remove --force #{e.name}` to remove all versions."
        end
      end

  when 'prune'
    require 'commands/prune'
    brew_prune

    when 'create'
      if ARGV.include? '--macports'
        exec "open", "http://www.macports.org/ports.php?by=name&substr=#{ARGV.next}"
      elsif ARGV.include? '--fink'
        exec "open", "http://pdb.finkproject.org/pdb/browse.php?summary=#{ARGV.next}"
      elsif ARGV.named.empty?
        raise UsageError
      else
        exec_editor(*ARGV.named.collect {|name| make name})
      end

    when 'diy', 'configure'
      puts diy

    when 'info', 'abv'
      if ARGV.named.empty?
        if ARGV.include? "--all"
          require 'formula'
          Formula.all.each do |f|
            info f
            puts '---'
          end
        else
          puts `ls #{HOMEBREW_CELLAR} | wc -l`.strip+" kegs, "+HOMEBREW_CELLAR.abv
        end
      elsif ARGV[0][0..6] == 'http://' or ARGV[0][0..7] == 'https://' or ARGV[0][0..5] == 'ftp://'
        path = Pathname.new(ARGV.shift)
        /(.*?)[-_.]?#{path.version}/.match path.basename
        unless $1.to_s.empty?
          name = $1
        else
          name = path.stem
        end
        puts "#{name} #{path.version}"
      else
        ARGV.formulae.each{ |f| info f }
      end

  when 'cleanup'
    require 'commands/cleanup'
    brew_cleanup

  when 'install'
    check_for_blacklisted_formula(ARGV.named)
    brew_install

  when 'log'
    require 'commands/log'
    brew_log

  # For each formula given, show which other formulas depend on it.
  # We only go one level up, ie. direct dependencies.
  when 'uses'
    uses = ARGV.formulae.map{ |f| Formula.all.select{ |ff| ff.deps.include? f.name }.map{|f| f.name} }.flatten.uniq
    if ARGV.include? "--installed"
      uses = uses.select { |f| f = HOMEBREW_CELLAR+f; f.directory? and not f.subdirs.empty? }
    end
    puts uses.sort

  when 'deps'
    if ARGV.include?('--all')
      require 'formula'
      Formula.all.each do |f|
        puts "#{f.name}:#{f.deps.join(' ')}"
      end
    elsif ARGV.include?("-1") or ARGV.include?("--1")
      puts ARGV.formulae.map {|f| f.deps or []}.flatten.uniq.sort
    else
      require 'formula_installer'
      puts ARGV.formulae.map {|f| FormulaInstaller.expand_deps(f).map {|f| f.name} }.flatten.uniq.sort
    end

  when 'cat'
    Dir.chdir HOMEBREW_REPOSITORY
    exec "cat", ARGV.formulae.first.path, *ARGV.options_only

  when 'outdated'
    outdated_brews.each do |keg, name, version|
      if $stdout.tty? and not ARGV.flag? '--quiet'
        versions = keg.cd{ Dir['*'] }.join(', ')
        puts "#{name} (#{versions} < #{version})"
      else
        puts name
      end
    end

  when 'fetch'
    require 'commands/fetch'
    brew_fetch

  when 'doctor', 'dr'
    require 'commands/doctor'
    brew_doctor

  when 'audit'
    require 'commands/audit'
    brew_audit

  else
    # Add example external commands to PATH before checking.
    ENV['PATH'] += ":#{HOMEBREW_REPOSITORY}/Library/Contributions/examples"

    # Check for an external shell command
    if system "/usr/bin/which -s brew-#{arg}"
      # Add some Homebrew vars to the ENV
      %w(CACHE CELLAR LIBRARY_PATH PREFIX REPOSITORY).each do |e|
        ENV["HOMEBREW_#{e}"] = eval("HOMEBREW_#{e}")
      end
      exec("brew-#{arg}", *ARGV)
    end

    # Check for an external ruby command
    external_rb = `/usr/bin/which brew-#{arg}.rb`.chomp
    unless external_rb.empty?
      require external_rb
      exit 0
    end

    # Check for git commands
    if %w(branch checkout pull push rebase reset).include? arg
      onoe "Unknown command '#{arg}' (did you mean 'git #{arg}'?)"
    else
      onoe "Unknown command '#{arg}'"
    end
  end

rescue FormulaUnspecifiedError
  abort "This command requires a formula argument"
rescue KegUnspecifiedError
  abort "This command requires a keg argument"
rescue UsageError
  onoe "Invalid usage"
  abort ARGV.usage
rescue SystemExit
  puts "Kernel.exit" if ARGV.verbose?
  raise
rescue Interrupt => e
  puts # seemingly a newline is typical
  exit 130
rescue BuildError => e
  e.backtrace[1] =~ %r{Library/Formula/(.+)\.rb:(\d+)}
  formula_name = $1
  error_line = $2
  puts "Exit status: #{e.exit_status}"
  puts
  puts "http://github.com/mxcl/homebrew/blob/master/Library/Formula/#{formula_name}.rb#L#{error_line}"
  puts
  ohai "Environment"
  dump_config
  puts
  ohai "Build Flags"
  dump_build_env e.env
  onoe e
  puts PLEASE_REPORT_BUG
  # this feature can be slow (depends on network conditions and if github is up)
  # so ideally we'd show feedback, eg. "checking for existing issues..." and
  # then replace that string with the following when the github api returns
  issues = issues_for_formula(formula_name)
  puts "These existing issues may help you:", *issues unless issues.empty?
  if e.was_running_configure?
    puts "It looks like an autotools configure failed."
    puts "Consider re-running the install with '-vd' to keep 'config.log' around:"
    puts "    brew install -vd #{formula_name}"
    puts "Gist 'config.log' and any error output when reporting an issue."
    puts "Remember to include your config information: brew --config"
  end
  puts
  puts "Also try:"
  puts "  `brew doctor` to check your setup for common problems."
  puts "  `brew missing` to check installed packages for missing deps."
  exit 1
rescue RuntimeError, SystemCallError => e
  onoe e
  puts e.backtrace if ARGV.debug?
  exit 1
rescue Exception => e
  onoe e
  puts PLEASE_REPORT_BUG
  puts e.backtrace
  exit 1
end
